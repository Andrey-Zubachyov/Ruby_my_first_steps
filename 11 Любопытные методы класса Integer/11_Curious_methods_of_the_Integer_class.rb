# methods of class Integer
=begin
`even?` и `odd?` - четный или нечетный
Мы можем проверить любое целое число на четность (делится ли оно на два без остатка)
с помощью этих двух методов.
Знак вопроса в конце метода говорит лишь о том, что метод возвращает значение типа
Boolean (в языке руби нет отдельного типа для Boolean, поэтому это либо TrueClass тип,
либо FalseClass тип). Другими словами, значение либо true, либо false. Например, метод,
который определяет, беременна ли девушка, можно записать только со знаком вопроса в
конце, потому что результат или true (истина), или ложь (false). Часто такие методы
начинаются со слова “is”:
girl.is_little_bit_pregnant?
=end
n = 1
p n.even? #> false

=begin 
`upto` - вверх до, `downto` - вниз до
Эти методы принимают параметр, и вызывают блок определенное количество раз. До
этого мы использовали times, который вел отсчет с нуля. Чтобы посчитать от нуля до 10
можно использовать или `times` или `upto`:
=end
3.times { |i| puts "Я робот #{i}" }
#>Я робот 0
#>Я робот 1
#>Я робот 2

0.upto(2) { |i| puts "Я робот #{i}" }
#>Я робот 0
#>Я робот 1
#>Я робот 2

puts "Запускаем ракеты..."
5.downto(1) { |i| puts "Осталось #{i} секунд" }
puts "Ба-бах!"
#>Запускаем ракеты...
#>Осталось 4 секунд
#>Осталось 3 секунд
#>Осталось 2 секунд
#>Осталось 1 секунд
#>Ба-бах!

#Разумеется, блок можно написать с помощью do...end, результат от этого не изменится:

puts "Запускаем ракеты..."
5.downto(0) do |i|
puts "Осталось #{i} секунд"
end
puts "Ба-бах!"

#Задание 1: вывести на экран числа от 50 до 100.
50.upto(99) {|x|puts x}

#Задание 2: вывести на экран числа от 50 до 100, и если число четное - рядом с ним написать `true`, если нечетное - `false`.

50.upto(99) do |x|
	
puts "#{x}: #{x.even?}"

end