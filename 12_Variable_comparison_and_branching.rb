#Variable comparison and branching

=begin
Когда сравнивают переменные, употребляют такие выражения как:
● “Бранчинг”, “ветвление” - от англ.слова branch - ветвь. Подразумевается, что
существует одна или более “ветвей” - участков кода, которые выполняются в
зависимости от результата какого-либо сравнения. Примечание: в дальнейшем мы
будем изучать работу с git, системой контроля версий, там тоже есть свои
ветки, которые называют “бранчи”. Это немного другое.
● “Ветка”, “блок”, “бранч” - участок кода, который, возможно, будет исполнен при
соблюдении некоторого условия.
● “Сравнение”, “тест” - непосредственно сама процедура сравнения. От
программистов с опытом можно услышать слово “тест”: “тестирование”
переменной на определенное значение. В *nix-оболочках можно ввести команду
получения мануала (руководства) по тестированию переменных (это документация
по тестированию переменных непосредственно для вашей оболочки, а не для
языка руби):
=end

age = gets.to_i
if age > 18
puts 'Access granted'
end

#or
#Если условие простое, из него можно также сделать one-liner (условие в 1 строку):
age = gets.to_i

exit if age < 18

puts 'Access granted'

=begin
Сравнивать переменные или значения можно по-разному. Существует несколько
операторов сравнения:
● `>` - больше
● `<input type="text" name="login" data-error-highlight-` - меньше
● `==` - равно
● `!=` - не равно
● `>=` - больше или равно
● `<input type="text" name="login" data-error-highlight-=` - меньше или равно
● `<input type="text" name="login" data-error-highlight-=>` - (только руби) космический корабль (spaceship operator. Да, и такое бывает).
Мы не будем рассматривать этот оператор, но он может вам пригодиться когда вы
будете делать кастомную сортировку в руби. Например, создадите класс животных
и захотите отсортировать их по количеству ушей.
● `===` - (только javascript) точно равно
● `!==` - (только javascript) точно не равно
=end

Задание: попробуйте написать следующие сравнения в REPL и догадаться, каков будет
результат для языка руби. Заполните таблицы:
Выражение: 1 > 1 1 <input type="text" name="login" data-error-highlight- 1 1 >= 2 1 == 1 1 != 1
Результат:
Выражение: 1 > 2 1 <input type="text" name="login" data-error-highlight- 2 1 <input type="text" name="login" data-error-highlight-= 2 1 == 2 1 != 2
Результат:
Выражение: true > false false > true true == true false == false false != true
Результат:
